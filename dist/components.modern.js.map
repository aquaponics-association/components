{"version":3,"file":"components.modern.js","sources":["../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../node_modules/strict-uri-encode/index.js","../node_modules/decode-uri-component/index.js","../node_modules/split-on-first/index.js","../node_modules/filter-obj/index.js","../node_modules/query-string/index.js","../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes.createPolicy('lit-html', { createHTML: (s) => s });\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        let value = this.getHTML();\n        if (policy !== undefined) {\n            // this is secure because `this.strings` is a TemplateStringsArray.\n            // TODO: validate this when\n            // https://github.com/tc39/proposal-array-is-template-object is\n            // implemented.\n            value = policy.createHTML(value);\n        }\n        template.innerHTML = value;\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        const parts = this.parts;\n        // If we're assigning an attribute via syntax like:\n        //    attr=\"${foo}\"  or  attr=${foo}\n        // but not\n        //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n        // then we don't want to coerce the attribute value into one long\n        // string. Instead we want to just return the value itself directly,\n        // so that sanitizeDOMValue can get the actual value rather than\n        // String(value)\n        // The exception is if v is an array, in which case we do want to smash\n        // it together into a string without calling String() on the array.\n        //\n        // This also allows trusted values (when using TrustedTypes) being\n        // assigned to DOM sinks without being stringified in the process.\n        if (l === 1 && strings[0] === '' && strings[1] === '') {\n            const v = parts[0].value;\n            if (typeof v === 'symbol') {\n                return String(v);\n            }\n            if (typeof v === 'string' || !isIterable(v)) {\n                return v;\n            }\n        }\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        if (this.startNode.parentNode === null) {\n            return;\n        }\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n    try {\n        const options = {\n            get capture() {\n                eventOptionsSupported = true;\n                return false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.addEventListener('test', options, options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.removeEventListener('test', options, options);\n    }\n    catch (_e) {\n        // event options not supported\n    }\n})();\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.4.1');\n}\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n","'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n","'use strict';\n\nmodule.exports = (string, separator) => {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (separator === '') {\n\t\treturn [string];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [string];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n};\n","'use strict';\nmodule.exports = function (obj, predicate) {\n\tvar ret = {};\n\tvar keys = Object.keys(obj);\n\tvar isArr = Array.isArray(predicate);\n\n\tfor (var i = 0; i < keys.length; i++) {\n\t\tvar key = keys[i];\n\t\tvar val = obj[key];\n\n\t\tif (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n\t\t\tret[key] = val;\n\t\t}\n\t}\n\n\treturn ret;\n};\n","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\nconst filterObject = require('filter-obj');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSep = options.arrayFormat === 'bracket-separator' ?\n\t\t\t\t'[]=' :\n\t\t\t\t'=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tcase 'bracket-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[\\])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null ?\n\t\t\t\t\t[] :\n\t\t\t\t\tvalue.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], arrayValue);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(query, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn ret;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of query.split('&')) {\n\t\tif (param === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url_, hash] = splitOnFirst(url, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url_.split('?')[0] || '',\n\t\t\tquery: parse(extract(url), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (object, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true\n\t}, options);\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(object.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\thash = `#${encode(object.fragmentIdentifier, options)}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n\nexports.pick = (input, filter, options) => {\n\toptions = Object.assign({\n\t\tparseFragmentIdentifier: true\n\t}, options);\n\n\tconst {url, query, fragmentIdentifier} = exports.parseUrl(input, options);\n\treturn exports.stringifyUrl({\n\t\turl,\n\t\tquery: filterObject(query, filter),\n\t\tfragmentIdentifier\n\t}, options);\n};\n\nexports.exclude = (input, filter, options) => {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn exports.pick(input, exclusionFilter, options);\n};\n","import { html, render } from 'lit-html';\nimport * as qs from 'query-string';\n\ndeclare global {\n  interface Window {\n    AAOrganizationsList: typeof AAOrganizationsList;\n  }\n}\n\nexport interface AAImageFormat {\n  name: string;\n  url: string;\n  width: number;\n  height: number;\n}\n\nexport interface AAImage {\n  id: number;\n  name: string;\n  caption?: string;\n  formats: {\n    thumbnail: AAImageFormat;\n    small: AAImageFormat;\n  };\n}\n\nexport interface AATag {\n  id: number;\n  name: string;\n  description?: string;\n  uid: string;\n}\n\nexport interface AAOrganization {\n  id: number;\n  name: string;\n  email?: string;\n  website?: string;\n  description?: string;\n  logo?: AAImage;\n  tags?: AATag[];\n}\n\nexport default class AAOrganizationsList {\n  constructor(selector: string) {\n    const elements: NodeListOf<Element> = Array.prototype.slice.call(\n      window.document.querySelectorAll(selector)\n    );\n\n    for (let el in elements) {\n      this.process(elements[el]);\n    }\n  }\n\n  async getData(params: { tags?: string }) {\n    const options = {};\n\n    if (params.tags) options['tags.id'] = params.tags;\n\n    const res = await fetch(\n      `https://api.aquaponicsassociation.org/organizations?${qs.stringify(\n        options\n      )}`\n    );\n\n    const json = await res.json();\n    return json;\n  }\n\n  async process(el: Element) {\n    const tags = el.getAttribute('data-tags');\n    const data: AAOrganization[] = await this.getData({ tags });\n\n    const template = data.map((org) => {\n      if (!org?.logo?.formats?.small?.url) return;\n\n      const logoUrl = `https://api.aquaponicsassociation.org${org?.logo?.formats?.small?.url}`;\n\n      return html`\n        <div class=\"aa-organization\">\n          <div class=\"aa-logo\">\n            <a href=\"${org.website || '#'}\" rel=\"noopener\" target=\"_blank\">\n              <img src=\"${logoUrl}\" alt=\"${org.name}\" />\n            </a>\n          </div>\n          <a href=\"${org.website || '#'}\" rel=\"noopener\" target=\"_blank\">\n            <h2 class=\"name\">${org.name}</h2>\n          </a>\n        </div>\n      `;\n    });\n\n    render(template, el);\n  }\n}\n\nwindow.AAOrganizationsList = AAOrganizationsList;\n"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","window","customElements","undefined","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","Template","[object Object]","result","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","policy","trustedTypes","createPolicy","createHTML","commentMarker","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","value","getHTML","innerHTML","isPrimitive","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","v","text","t","setAttribute","_getValue","committer","directive","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","singleMatcher","multiMatcher","decodeComponents","components","decodeURIComponent","err","left","right","prototype","concat","decode","input","tokens","encodedURI","TypeError","replace","replaceMap","%FE%FF","%FF%FE","entries","Object","keys","customDecodeURIComponent","string","separator","separatorIndex","obj","predicate","ret","isArr","val","validateArrayFormatSeparator","encode","strict","encodeURIComponent","x","charCodeAt","toString","toUpperCase","decodeComponent","keysSorter","sort","a","b","Number","map","removeHash","hashStart","extract","queryStart","parseValue","parseNumbers","isNaN","trim","parseBooleans","parse","query","assign","arrayFormat","arrayFormatSeparator","formatter","accumulator","includes","isEncodedArray","newValue","test","arrayValue","parserForArrayFormat","create","param","splitOnFirst","k","reduce","Boolean","exports","object","shouldFilter","skipNull","skipEmptyString","keyValueSep","encoderForArrayFormat","objectCopy","filter","url","url_","hash","parseFragmentIdentifier","fragmentIdentifier","queryFromUrl","parsedQueryFromUrl","queryString","stringify","getHash","parseUrl","stringifyUrl","filterObject","exclusionFilter","pick","AAOrganizationsList","constructor","selector","elements","querySelectorAll","el","process","params","tags","res","fetch","qs","json","firstChild","render","appendInto","getData","org","logo","_org$logo","formats","_org$logo$formats","small","_org$logo$formats$sma","logoUrl","_org$logo2","_org$logo2$formats","_org$logo2$formats$sm","website"],"mappings":"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"}